class Solution {
public:
    int minKBitFlips(vector<int>& nums, int k) {
        int n = nums.size();
        vector<int> isFlipped(n, 0);  // Track flips
        int flipCount = 0;  // Number of flips done so far
        int result = 0;  // Number of operations

        for (int i = 0; i < n; ++i) {
            // Reduce the flip count for the current window
            if (i >= k) {
                flipCount -= isFlipped[i - k];
            }
            // Determine if the current bit needs to be flipped
            if ((flipCount % 2 == 0 && nums[i] == 0) || (flipCount % 2 == 1 && nums[i] == 1)) {
                if (i + k > n) {
                    return -1;  // Not enough elements to flip
                }
                isFlipped[i] = 1;  // Mark this position as flipped
                flipCount++;
                result++;
            }
        }
        return result;
    }
};
