class Solution {
public:
    void updatebitctr(vector<int>& arr, int x, int val) {
        for (int i = 0; i < 32; i++) {
            if ((x>>i) & 1) {
                arr[i] += val;
            }
        }
    }
    int getval(vector<int>& arr) {
        int mask = 0;
        for (int i = 0; i < 32; i++) {
            if (arr[i] >= 1) {
                mask |= 1 << i;
            }
        }
        return mask;
    }

    int minimumSubarrayLength(vector<int>& nums, int k) {
        int n = nums.size();
        vector<int> count(32, 0);
        int st = 0, end = 0;
        int ans = INT_MAX;
        while (end < n) {
            updatebitctr(count, nums[end], 1);
            while (st <= end && getval(count) >= k) {
                ans = min(ans, end - st + 1);
                updatebitctr(count, nums[st], -1);
                st++;
            }
            end++;
        }
        return ans == INT_MAX ? -1 : ans;
    }
};
