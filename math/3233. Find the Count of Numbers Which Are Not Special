class Solution {
public:
    vector<int> sieve(int n) {
        vector<int> prime(n + 1, 1);
        prime[0]=0;
        prime[1]=0;
        for(int p=2;p*p<=n;p++){
            if(prime[p]==true){
                for(int i=p*p;i<=n;i+=p){
                    prime[i]=false;
                }
            }
        }
        for(int i=1;i<=n;i++){
            prime[i] += prime[i-1];
        }
        return prime;

    }

    int nonSpecialCount(int l, int r) {
        // one divisor other than 1 and number itself is its sqrt and hs to be
        // prime to find the numbers bwtween l and r which are square of prime
        // number
        int lsqrt = sqrt(l);
        int rsqrt = sqrt(r);
        if (lsqrt * lsqrt != l)
            lsqrt += 1;
        vector<int> primes = sieve(rsqrt);
        int count_primes = primes[rsqrt]-primes[lsqrt-1];
        return (r-l+1)-count_primes;
    }
};
