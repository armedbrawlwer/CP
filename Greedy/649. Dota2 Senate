#include <queue>
#include <string>

class Solution {
public:
    string predictPartyVictory(string senate) {
        // Queues to store the indices of Radiant and Dire senators
        queue<int> radiant, dire;
        
        // Initialize the queues with the indices of respective senators
        for (int i = 0; i < senate.size(); ++i) {
            if (senate[i] == 'R') {
                radiant.push(i);
            } else {
                dire.push(i);
            }
        }
        
        // Process the senators until one of the queues is empty
        while (!radiant.empty() && !dire.empty()) {
            int r_index = radiant.front();
            int d_index = dire.front();
            radiant.pop();
            dire.pop();
            
            // The senator with the lower index bans the other
            if (r_index < d_index) {
                // Radiant senator bans a Dire senator and gets back in line
                radiant.push(r_index + senate.size());
            } else {
                // Dire senator bans a Radiant senator and gets back in line
                dire.push(d_index + senate.size());
            }
        }
        
        // If there are no Dire senators left, Radiant wins
        return radiant.empty() ? "Dire" : "Radiant";
    }
};
