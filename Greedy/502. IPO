#include <vector>
#include <queue>
#include <utility>

using namespace std;

class Solution {
public:
    int findMaximizedCapital(int k, int w, vector<int>& profits, vector<int>& capital) {
        int n = profits.size();
        
        // Pair capital with profits and sort by capital
        vector<pair<int, int>> projects(n);
        for (int i = 0; i < n; ++i) {
            projects[i] = {capital[i], profits[i]};
        }
        sort(projects.begin(), projects.end());
        
        priority_queue<int> maxHeap;
        int j = 0;
        
        for (int i = 0; i < k; ++i) {
            // Push all projects that can be started with current capital into the maxHeap
            while (j < n && projects[j].first <= w) {
                maxHeap.push(projects[j].second);
                ++j;
            }
            
            // If maxHeap is empty, no further projects can be started
            if (maxHeap.empty()) {
                break;
            }
            
            // Pop the project with the maximum profit
            w += maxHeap.top();
            maxHeap.pop();
        }
        
        return w;
    }
};
