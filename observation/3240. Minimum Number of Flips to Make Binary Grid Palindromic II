class Solution {
public:
    int minFlips(vector<vector<int>>& grid) {
        int n = grid.size();
        int m = grid[0].size();

        int flipsCount = 0;

        for (int i = n / 2 + n % 2; i < n; i++) {
            for (int j = m / 2 + m % 2; j < m; j++) {
                int sum = grid[i][j] + grid[i][m - j - 1];
                sum += grid[n - i - 1][j] + grid[n - i - 1][m - j - 1];

                flipsCount += min(sum, 4 - sum);
            }
        }

        int flipsCountMiddle = 0;
        int sumMiddle = 0;

        if (n % 2) {
            for (int j = m / 2 + m % 2; j < m; j++) {
                int sum = grid[n / 2][j] + grid[n / 2][m - j - 1];
                flipsCountMiddle += min(sum, 2 - sum);
                sumMiddle += sum;
            }
        }

        if (m % 2) {
            for (int i = n / 2 + n % 2; i < n; i++) {
                int sum = grid[i][m / 2] + grid[n - i - 1][m / 2];
                flipsCountMiddle += min(sum, 2 - sum);
                sumMiddle += sum;
            }
        }
        
        if (flipsCountMiddle < 2 && sumMiddle % 4) {
            flipsCount += min(sumMiddle % 4, 4 - sumMiddle % 4);
        }
        else {
            flipsCount += flipsCountMiddle;
        }

        flipsCount += (n % 2 && m % 2 && grid[n / 2][m / 2]);

        return flipsCount;
    }
};
