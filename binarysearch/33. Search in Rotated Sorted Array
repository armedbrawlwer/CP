class Solution {
public:
    int findPivot(const vector<int>& nums, int n) {
        int l = 0, r = n - 1;
        while (l < r) {
            int mid = l + (r - l) / 2;
            if (nums[mid] > nums[r]) {
                l = mid + 1;
            } else {
                r = mid;
            }
        }
        return l;
    }

    int bs(const vector<int>& nums, int l, int r, int k) {
        while (l <= r) {
            int mid = l + (r - l) / 2;
            if (nums[mid] == k) {
                return mid;
            } else if (nums[mid] > k) {
                r = mid - 1;
            } else {
                l = mid + 1;
            }
        }
        return -1;
    }

    int search(vector<int>& nums, int target) {
         int n = nums.size();
        int pivot = findPivot(nums, n);
        int first = bs(nums, 0, pivot - 1, target);
        if (first != -1)
            return first;
        int second = bs(nums, pivot, n - 1, target);
        if (second != -1)
            return second;
        return -1;
    }
};
