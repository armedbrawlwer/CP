class Solution {
public:
    bool isposs(vector<int> nums, int mid) {
        // since only first element can be only increased and not dereased amx
        // will be nums[0]
        int n = nums.size();
        vector<long long> arr(nums.begin(), nums.end());
        for (int i = 0; i < n - 1; i++) {
            if (arr[i] > mid)
                return false;
            long long buff = mid - arr[i];
            arr[i + 1] = arr[i + 1] - buff;
        }
        return arr[n - 1] <= mid;
    }

    int minimizeArrayValue(vector<int>& nums) {
        int n = nums.size();
        // binary search can be used to find if a number is possible as solution
        int l = 0, r = *max_element(nums.begin(), nums.end());
        int ans;
        while (l <= r) {
            int mid = l + (r - l) / 2;
            if (isposs(nums, mid)) {
                ans = mid;
                r = mid - 1;
            } else
                l = mid + 1;
        }
        return ans;
    }
};
