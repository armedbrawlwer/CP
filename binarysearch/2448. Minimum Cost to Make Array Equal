class Solution {
public:
    long long solve(vector<int>& nums, vector<int>& cost, int mid) {
        long long s = 0;
        for (int i = 0; i < nums.size(); i++) {
            s += (long long)abs(nums[i] - mid) * (long long)cost[i];
        }
        return s;
    }

    //for moving mid ,comparea cost of mid and mid+1
    long long minCost(vector<int>& nums, vector<int>& cost) {
        int n = nums.size();
        int lo = *min_element(nums.begin(), nums.end());
        int hi = *max_element(nums.begin(), nums.end());
        long long ans = INT_MAX;
        while (lo <= hi) {
            int mid = lo + (hi - lo) / 2;
            long long c1 = solve(nums, cost, mid);
            long long c2 =  solve(nums, cost, mid+1);
            ans = min(c1, c2);

            if (c1 < c2) {
                hi = mid - 1;
            } else  {
                lo = mid + 1;
            }
        }
        return ans == INT_MAX ? 0 : ans;
    }
};s
