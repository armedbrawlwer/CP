class Solution {
public:
    int maxTotalFruits(vector<vector<int>>& fruits, int startPos, int k) {
        int n = fruits.size();
        vector<int> prefix(n + 1, 0);
        for (int i = 0; i < n; ++i)
            prefix[i + 1] = prefix[i] + fruits[i][1];

        int ans = 0;

        // Go left then right
        for (int i = 0; i < n; ++i) {
            int leftPos = fruits[i][0];
            if (startPos - leftPos > k) continue;

            int maxRight = startPos + (k - 2 * max(0, startPos - leftPos));
            int r = upper_bound(fruits.begin(), fruits.end(), vector<int>{maxRight + 1, 0}) - fruits.begin();
            ans = max(ans, prefix[r] - prefix[i]);
        }

        // Go right then left
        for (int i = 0; i < n; ++i) {
            int rightPos = fruits[i][0];
            if (rightPos - startPos > k) continue;

            int minLeft = startPos - (k - 2 * max(0, rightPos - startPos));
            int l = lower_bound(fruits.begin(), fruits.end(), vector<int>{minLeft, 0}) - fruits.begin();
            ans = max(ans, prefix[i + 1] - prefix[l]);
        }

        return ans;
    }
};
