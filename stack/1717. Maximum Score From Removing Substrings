class Solution {
public:
    int solve(string& s, string s1, int x) {
        int cost = 0;
        stack<char> st;
        int n = s.size();

        for (int i = 0; i < n; i++) {
            if (st.empty()) {
                st.push(s[i]);
            } else {
                if (s[i] == s1[1] && st.top() == s1[0]) {
                    cost += x;
                    st.pop();
                } else {
                    st.push(s[i]);
                }
            }
        }
        string str;
        while (!st.empty()) {
            str += st.top();
            st.pop();
        }
        reverse(str.begin(), str.end());
        s = str;
        return cost;
    }

    int maximumGain(string s, int x, int y) {
        // first remove higher profit string and then remove lower profit string
        string s1="ab",s2="ba";
        if(x<y) swap(s1,s2),swap(x,y);
        return solve(s, s1, x) + solve(s, s2, y);
    }
};
