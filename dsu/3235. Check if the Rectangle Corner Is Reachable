class Solution {
public:

    void union_set(int x,int y,vector<int> &parent){
        int px = find_parent(parent,x);
        int py = find_parent(parent,y);
        if(px!=py){
            parent[py]=px;
        }
    }
    int find_parent(vector<int> &parent,int x){
        if(parent[x]!=x)return find_parent(parent,parent[x]);
        return parent[x];
    }

    bool check_outside_boundary(int x,int y,int r, int xc,int yc){
        if((x>xc || y>yc) && (x-r>=xc || y-r>=yc))return true;
        
        return false;
    }

    bool canReachCorner(int xc, int yc, vector<vector<int>>& arr) {
        int n = arr.size();
        vector<int> parent(n+2);
        for(int i=0;i<n+2;i++){
            parent[i]=i;
        }
        for(int i=0;i<n;i++){
            int x= arr[i][0],y = arr[i][1],r=arr[i][2];
            if(check_outside_boundary(x,y,r,xc,yc))continue;
            if(x-r<=0 || y+r>=yc)union_set(i,n,parent);
            if(x+r>=xc || y-r<=0)union_set(i,n+1,parent);

            for(int j=0;j<n;j++){
                // if(i==j)continue;
                //check if both circles are intersecting
                int x2= arr[i][0],y2 = arr[i][1],r2=arr[i][2];
                if(check_outside_boundary(x2,y2,r2,xc,yc))continue;
                if((x-x2)*(x-x2) + (y-y2)*(y-y2) <= (r+r2)*(r+r2)){
                    union_set(i,j,parent);
                }
            }
        }
        return find_parent(parent,n)!=find_parent(parent,n+1);

    }
};
