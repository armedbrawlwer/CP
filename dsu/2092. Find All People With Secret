class Solution {
public:
    vector<int> parent, rank;

    int find_parent(int u) {
        if (parent[u] != u)
            return parent[u] = find_parent(parent[u]);
        return parent[u];
    }

    void union_find(int u, int v) {
        int par_u = find_parent(u), par_v = find_parent(v);
        if (par_u != par_v) {
            if (rank[par_u] > rank[par_v]) {
                parent[par_v] = par_u;
            } else if (rank[par_u] < rank[par_v]) {
                parent[par_u] = par_v;
            } else {
                parent[par_v] = par_u;
                rank[par_u]++;
            }
        }
    }

    vector<int> findAllPeople(int n, vector<vector<int>>& meetings, int k) {
        // Sort meetings by time
        sort(meetings.begin(), meetings.end(),
             [](vector<int>& a, vector<int>& b) { return a[2] < b[2]; });

        // Initialize DSU
        parent.resize(n);
        rank.resize(n, 0);
        for (int i = 0; i < n; i++) {
            parent[i] = i;
        }

        // Union 0 and k initially
        union_find(0, k);

        int i = 0;
        while (i < meetings.size()) {
            int current_time = meetings[i][2];
            vector<pair<int, int>> temp_edges;

            // Process all meetings at the same timestamp
            while (i < meetings.size() && meetings[i][2] == current_time) {
                int u = meetings[i][0], v = meetings[i][1];
                union_find(u, v);
                temp_edges.emplace_back(u, v);
                i++;
            }

            // Check for people who know the secret
            for (auto [u, v] : temp_edges) {
                if (find_parent(u) != find_parent(0)) {
                    parent[u] = u; // Reset parent
                    parent[v] = v; // Reset parent
                }
            }
        }

        // Collect all people who know the secret
        vector<int> ans;
        for (int i = 0; i < n; i++) {
            if (find_parent(i) == find_parent(0)) {
                ans.push_back(i);
            }
        }

        return ans;
    }
};
