class Solution {
public:
    int minTimeToReach(vector<vector<int>>& arr) {
        int n = arr.size();
        int m = arr[0].size();

        vector<vector<int>> vis(n, vector<int>(m, INT_MAX));

        priority_queue<tuple<int, int, int>,
                            vector<tuple<int, int, int>>,
                            greater<>>
            pq;

        pq.push({0, 0, 0}); 
        vis[0][0] = 0;

        int dr[] = {-1, 1, 0, 0};
        int dc[] = {0, 0, -1, 1};

        while (!pq.empty()) {
            auto [t, r, c] = pq.top();
            pq.pop();

            if (r == n - 1 && c == m - 1)
                return t;

            // Explore 4 possible directions
            for (int k = 0; k < 4; k++) {
                int nr = r + dr[k], nc = c + dc[k];

                if (nr >= 0 && nr < n && nc >= 0 && nc < m) {
                    int wait_time = arr[nr][nc];
                    int nt = t;
                    if (wait_time > t) {
                        nt += wait_time - t;
                    }

                    if (nt < vis[nr][nc]) {
                        vis[nr][nc] = nt;
                        pq.push({nt + 1, nr, nc});
                    }
                }
            }
        }

        return -1;
    }
};
