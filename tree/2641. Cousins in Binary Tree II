/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left),
 * right(right) {}
 * };
 */
class Solution {
public:
    void solverec(vector<TreeNode*>& v) {
        if (v.empty())
            return;
        int ls = 0;
        for (auto node : v) {
            if (node->left)
                ls += node->left->val;
            if (node->right)
                ls += node->right->val;
        }
        vector<TreeNode*> child;
        for (auto node : v) {
            int cs = 0;
            if (node->left)
                cs += node->left->val;
            if (node->right)
                cs += node->right->val;
            if (node->left) {
                node->left->val = ls - cs;
                child.push_back(node->left);
            }
            if (node->right) {
                node->right->val = ls - cs;
                child.push_back(node->right);
            }
        }
        solverec(child);
    }

    TreeNode* replaceValueInTree(TreeNode* root) {
        vector<TreeNode*> v;
        v.push_back(root);
        solverec(v);
        root->val=0;
        return root;
    }
};
