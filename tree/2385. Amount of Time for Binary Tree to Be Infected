/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
   
    void dfs(TreeNode *root, int k,unordered_map<int,list<int>> &adj,queue<pair<int,int>> &q)
    {
        if(root->val==k) q.push({root->val,0});
        if(root->left==NULL && root->right==NULL)
        return;

        if(root->left!=NULL )
        {
            adj[root->val].push_back(root->left->val);
            adj[root->left->val].push_back(root->val);
            dfs(root->left,k,adj,q);
        }
        if(root->right!=NULL )
        {
            adj[root->val].push_back(root->right->val);
            adj[root->right->val].push_back(root->val);
            dfs(root->right,k,adj,q);
        }

    }

    int amountOfTime(TreeNode* root, int start) {
        unordered_map<int,list<int>> adj;
        queue<pair<int,int>> q;
        dfs(root,start,adj,q);
        int res = 0;
        set<int> visit;
        while(!q.empty())
        {
            pair<int,int> node = q.front();
            q.pop();

            visit.insert(node.first);
            int level = node.second;
            res=max(res,level);

            for(auto i:adj[node.first])
            {
                if(!visit.count(i))
                {
                    q.push({i,level+1});
                }
            }
        }
        return res;
    }
};
