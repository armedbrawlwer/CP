/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode* createBinaryTree(vector<vector<int>>& arr) {
        unordered_map<int,TreeNode*> mp;
        unordered_set<int> child;

        for(auto i:arr){
            int par = i[0],chid=i[1],dir=i[2];
            if(mp.find(par)==mp.end()){
                mp[par] = new TreeNode(par);
            }
            if(mp.find(chid)==mp.end()){
                mp[chid] = new TreeNode(chid);
            }

            if(dir==1){
                mp[par]->left = mp[chid];
            } else{
                mp[par]->right = mp[chid];
            }
            child.insert(chid);
        }

        for(auto i:mp){
            int par = i.first;
            if(child.find(par)==child.end()){
                return mp[par];
            }
        }
        return NULL;

    }
};
