class Solution {
  public:
    // l and r are input array
    // maxx : maximum in r[]
    // n: size of array
    // arr[] : declared globally with size equal to maximum in l[] and r[]
    // Function to find the maximum occurred integer in all ranges.
    int maxOccured(int n, int l[], int r[], int maxx) {
    vector<int> freq(maxx + 2, 0);

    // Mark the start and end points in the frequency array
    for (int i = 0; i < n; i++) {
        freq[l[i]]++;
        freq[r[i] + 1]--;
    }

    // Use prefix sum to calculate the number of segments covering each point
    int maxCount = 0;
    int result = 0;
    for (int i = 1; i <= maxx; i++) {
        freq[i] += freq[i - 1];
        if (freq[i] > maxCount) {
            maxCount = freq[i];
            result = i;
        }
    }

    return result;
}
};
