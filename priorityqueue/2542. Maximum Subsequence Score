class Solution {
public:
    static bool cmp(pair<int, int>& a, pair<int, int>& b) {
        return a.first < b.first;
    }

    long long maxScore(vector<int>& nums1, vector<int>& nums2, int k) {
        // here from nums2 array we have choice that each number can be min
        // number and then from k-1 element from start after sorting
        //remove the smallest element contriuting to sum
        priority_queue<int,vector<int>,greater<int>> pq;
        vector<pair<int, int>> v;
        int n = nums1.size();
        for (int i = 0; i < n; i++) {
            v.push_back({nums2[i], nums1[i]});
        }
        sort(v.rbegin(), v.rend(), cmp);
        long long s = 0;
        int ctr = 0;

        while (ctr < k) {
            s += v[ctr].second;
            pq.push(v[ctr].second);
            ctr += 1;
        }
        long long ans = s * v[k - 1].first;
        for (int i = k; i < n; i++) {
            int ele = pq.top();
            pq.pop();
            s -= ele;
            s += v[i].second;
            pq.push(v[i].second);
            long long r = s * v[i].first;
            ans = max(r, ans);
        }
        return ans;
    }
};
