#include <vector>
#include <queue>
using namespace std;

class Solution {
public:
    long long totalCost(vector<int>& costs, int k, int candidates) {
        int n = costs.size();
        int i = 0, j = n - 1;
        priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> pq;

        // Add the first 'candidates' elements from the start and end to the priority queue
        for (int x = 0; x < candidates && i <= j; ++x) {
            pq.push({costs[i], i});
            i++;
            if (i <= j) {
                pq.push({costs[j], j});
                j--;
            }
        }

        long long ans = 0;

        // Process k elements
        for (int x = 0; x < k; ++x) {
            auto [cost, index] = pq.top();
            pq.pop();
            ans += cost;

            // If the index is from the start, add the next element from the start
            if (index < i) {
                if (i <= j) {
                    pq.push({costs[i], i});
                    i++;
                }
            } 
            // If the index is from the end, add the next element from the end
            else if (index > j) {
                if (i <= j) {
                    pq.push({costs[j], j});
                    j--;
                }
            }
        }

        return ans;
    }
};
