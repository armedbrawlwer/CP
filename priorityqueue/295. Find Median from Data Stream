class MedianFinder {
public:
    priority_queue<int> maxi;
    priority_queue<int, vector<int>, greater<int>> mini;

    MedianFinder() {}

    void addNum(int num) {
        // check if maxheap is empty
        if (maxi.empty())
            maxi.push(num);
        else {
            if (num > maxi.top())
                mini.push(num);
            else 
                maxi.push(num);
        }
        // maintain the size of both heaps
        if (maxi.size()-1 > mini.size() ) {
            mini.push(maxi.top());
            maxi.pop();
        } else if (mini.size() > maxi.size()) {
            maxi.push(mini.top());
            mini.pop();
        }
    }

    double findMedian() {
        if (maxi.size() == mini.size())
            return ((double)maxi.top() + (double)mini.top()) / 2;
        else
            return maxi.top();
    }
};

/**
 * Your MedianFinder object will be instantiated and called as such:
 * MedianFinder* obj = new MedianFinder();
 * obj->addNum(num);
 * double param_2 = obj->findMedian();
 */
