class Solution {
public:

    int solverec(vector<int>& nums, int n,int k,int pre,int ind,int dp[501][501][26]){
        if(ind>=n)return 0;
        if(dp[ind][pre+1][k]!=-1) return dp[ind][pre+1][k];
        int len=0;
        if(pre == -1){
            //take 
            len = max(len,1+solverec(nums,n,k,ind,ind+1,dp));
            //leave
            len = max(len,solverec(nums,n,k,pre,ind+1,dp));
        } else {
            //take
            if(nums[ind]==nums[pre]){
                len = max(len,1+solverec(nums,n,k,ind,ind+1,dp));
            } else if(nums[ind]!=nums[pre] && k>0){
                len = max(len,1+solverec(nums,n,k-1,ind,ind+1,dp));
            }

            //leave 
            len = max(len,solverec(nums,n,k,pre,ind+1,dp));
        }
        return dp[ind][pre+1][k]= len;
    }

    int maximumLength(vector<int>& nums, int k) {
        int n = nums.size();
        int dp[501][501][26];
        memset(dp,-1,sizeof(dp));
        return solverec(nums,n,k,-1,0,dp);
    }
};
