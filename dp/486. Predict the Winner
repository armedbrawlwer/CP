class Solution {
public:
    int solverec(vector<int>& nums, int i, int j, int dp[][21]) {
        if (i > j)
            return 0;
        if (i == j)
            return nums[i];

        if (dp[i][j] != -1)
            return dp[i][j];

        int take_i = nums[i] + min(solverec(nums, i + 2, j,dp),
                                   solverec(nums, i + 1, j - 1,dp));
        int take_j = nums[j] + min(solverec(nums, i, j - 2,dp),
                                   solverec(nums, i + 1, j - 1,dp));

        return dp[i][j] = max(take_i, take_j);
    }

    bool predictTheWinner(vector<int>& nums) {
        int n = nums.size();
        int i = 0;
        int j = n - 1;
        int  dp[21][21];
        memset(dp, -1, sizeof(dp));
        int tot = accumulate(nums.begin(), nums.end(), 0);
        int p1score = solverec(nums, i, j, dp);
        int p2score = tot - p1score;
        return p1score >= p2score;
    }
};
class Solution {
public:
int n;
    int solve(vector<int>& nums,int l,int r){
        if(l>r)return 0;
        int take_l = nums[l]-solve(nums,l+1,r);
        int take_r = nums[r]-solve(nums,l,r-1);
        return max(take_l,take_r);
    }
    int tab(vector<int> &nums){
        vector<vector<int>> dp(n+1,vector<int>(n+1,0));
        for(int i=0;i<n;i++)dp[i][i]=nums[i];
        for(int l = n-1;l>=0;l--){
            for(int r = 1;r<n;r++){
                if(l>r)continue;
                int takel = nums[l] - dp[l+1][r];
                int take2 = nums[r]-dp[l][r-1];
                dp[l][r] = max(takel,take2);
            }
        }
        return dp[0][n-1];
    }

    bool predictTheWinner(vector<int>& nums) {
        n = nums.size();
        // return solve(nums,0,n-1)>=0;
        return tab(nums)>=0;
    }
};
