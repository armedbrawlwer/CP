class Solution {
public:
    long long maxPoints(vector<vector<int>>& points) {
        int m = points.size();      // Number of rows
        int n = points[0].size();   // Number of columns

        vector<long long> prevRow(n, 0);

        // Initialize with the first row points
        for (int j = 0; j < n; j++) {
            prevRow[j] = points[0][j];
        }

        // Iterate over each row from the second row to the last
        for (int i = 1; i < m; i++) {
            vector<long long> currRow(n, 0);
            vector<long long> leftMax(n, 0), rightMax(n, 0);

            // Fill leftMax array
            leftMax[0] = prevRow[0];
            for (int j = 1; j < n; j++) {
                leftMax[j] = max(leftMax[j - 1], prevRow[j] + j);
            }

            // Fill rightMax array
            rightMax[n - 1] = prevRow[n - 1] - (n - 1);
            for (int j = n - 2; j >= 0; j--) {
                rightMax[j] = max(rightMax[j + 1], prevRow[j] - j);
            }

            // Calculate current row's dp values
            for (int j = 0; j < n; j++) {
                currRow[j] = points[i][j] + max(leftMax[j] - j, rightMax[j] + j);
            }

            prevRow = currRow;  // Move to the next row
        }

        // The answer is the maximum points we can get in the last row
        return *max_element(prevRow.begin(), prevRow.end());
    }
};
