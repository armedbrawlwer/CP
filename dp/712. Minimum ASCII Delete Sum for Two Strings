class Solution {
public:
int m ,n;
unordered_map<int,unordered_map<int,int>> dp;

    int solverec(string s1,string s2,int i,int j){
        if(i==m && j==n)return 0;
        if(i==m){
            return (s2[j])+solverec(s1,s2,i,j+1);
                    }
        if(j==n){
            return (s1[i])+solverec(s1,s2,i+1,j);
        }
        if(dp.find(i)!=dp.end() && dp[i].find(j)!=dp[i].end())return dp[i][j];

        int val = 1e6;
        int e=s1[i];
        int e2 = s2[j];
        if(s1[i]==s2[j]){
            val=min(val,solverec(s1,s2,i+1,j+1));
        } else{
            //delete from either or both
            val = min(val,e+solverec(s1,s2,i+1,j));
            val = min(val,e2+solverec(s1,s2,i,j+1));
            // val = min(val,3+e2+solverec(s1,s2,i+1,j+1));
        }
        return dp[i][j] =  val;

    }
    int solvetab(string s1, string s2) {
        m = s1.size();
        n = s2.size();
        
        // Create a dp table initialized to 0
        vector<vector<int>> dp(m + 1, vector<int>(n + 1, 0));
        
        // Fill in the base cases
        for (int i = m - 1; i >= 0; i--) {
            dp[i][n] = dp[i + 1][n] + s1[i];
        }
        for (int j = n - 1; j >= 0; j--) {
            dp[m][j] = dp[m][j + 1] + s2[j];
        }
        
        // Fill in the dp table
        for (int i = m - 1; i >= 0; i--) {
            for (int j = n - 1; j >= 0; j--) {
                if (s1[i] == s2[j]) {
                    dp[i][j] = dp[i + 1][j + 1];  // No deletion needed if characters match
                } else {
                    dp[i][j] = min(s1[i] + dp[i + 1][j],  // Delete from s1
                                   s2[j] + dp[i][j + 1]); // Delete from s2
                }
            }
        }
        // The answer is in dp[0][0]
        return dp[0][0];
    }

    int minimumDeleteSum(string s1, string s2) {
        m=s1.size();
        n=s2.size();
        // memset(dp,-1,sizeof(dp));
        //since we have to find min we need to consider options
        return  solvetab(s1,s2);
    }
};
