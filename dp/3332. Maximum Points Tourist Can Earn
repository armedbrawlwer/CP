class Solution {
public:
    int K, N;
int dp[201][201];

    int solve(vector<vector<int>>& st, vector<vector<int>>& tr, int day,
              int city) {
        if (day == K)
            return 0;

        if(dp[day][city]!=-1)return dp[day][city];
        int score = 0;
        // now either stay or go to another
        // stay
        int w1 = st[day][city] + solve(st, tr, day + 1, city);

        int travelscore = 0;
        for (int i = 0; i < N; i++) {
            if (i == city)
                continue;
            travelscore =
                max(travelscore, tr[city][i] + solve(st, tr, day + 1, i));
        }
        return dp[day][city] = max(travelscore, w1);
    }

    int maxScore(int n, int k, vector<vector<int>>& st,
                 vector<vector<int>>& tr) {
        // vector<int> start = st[0];
        K = k;
        N = n;
        int score = 0;
        memset(dp,-1,sizeof(dp));
        
        for (int i = 0; i < n; i++) {
            score = max(score, solve(st, tr, 0, i));
        }
        return score;
    }
};
