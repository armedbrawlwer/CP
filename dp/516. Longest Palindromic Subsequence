class Solution {
public:
int n;

    int solve(string &a,string &b,int i,int j){
        if(i==n || j==n)return 0;

        if(a[i]==b[j])return 1+solve(a,b,i+1,j+1);
        else {
            return max(solve(a,b,i,j+1),solve(a,b,i+1,j));
        }
    }

    int longestPalindromeSubseq(string s) {
        n = s.size();
        string p = s;
        reverse(p.begin(),p.end());
        vector<vector<int>> dp(n+1,vector<int>(n+1,0));
        for(int i=n-1;i>=0;i--){
            for(int j=n-1;j>=0;j--){
                if(s[i]==p[j]){
                    dp[i][j] = 1+dp[i+1][j+1];
                } else {
                    dp[i][j] = max(dp[i][j+1],dp[i+1][j]);
                }
            }
        }
        return dp[0][0];
    }
};
