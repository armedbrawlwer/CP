class Solution {
public:
    vector<int> largestDivisibleSubset(vector<int>& nums) {
        int n=nums.size();
        vector<int>dp(n,1);
        vector<int> hash(n);
        int maxi=1;
        int last=0;
        vector<int>ans;
        sort(nums.begin(),nums.end());
        for(int i=0;i<n;i++)
        {
            hash[i]=i;
            for(int pre=0;pre<i;pre++)
            {
                if((nums[i]%nums[pre]==0 &&
                1+dp[pre]>dp[i]))
                {
                    dp[i]=1+dp[pre];
                    hash[i]=pre;
                }
            }
            if(dp[i]>maxi)
            {
                maxi=dp[i];
                last=i;
            }
        }
        ans.push_back(nums[last]);
        while(hash[last]
        !=last)
        {
            last=hash[last];
            ans.push_back(nums[last]);
        }
        reverse(ans.begin(),ans.end());
        return ans;
    }
};
