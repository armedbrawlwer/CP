// class Solution {
// public:
//     vector<vector<vector<long long>>> dp;
//     long long solve(int i, long long k, bool started, vector<int> &nums){
//         if(k == 0) return 0;

//         if(i == nums.size()){
//             if(k == 1 && started) return 0;
//             return -1e15;
//         }
//         if(dp[i][k][started] != -1e16) return dp[i][k][started];

//         long long ans = -1e15;
        
//         if(started)
//             ans = solve(i, k - 1, false, nums);
        
//         ans = max((k % 2 == 0 ? -1 : 1) * k * nums[i] + solve(i + 1, k, true, nums), ans);
        
//         if(!started)
//             ans = max(solve(i + 1, k, false, nums), ans);
        
//         return dp[i][k][started] = ans;
//     }
//     long long maximumStrength(vector<int>& nums, int k) {
//         dp = vector<vector<vector<long long>>> (nums.size(), vector<vector<long long>> (k + 1, vector<long long> (2, -1e16)));
//         long long ans = -1e15;
//         return solve(0, (long long)k, false, nums);
//     }
// };
typedef long long ll;
class Solution {
public:
    ll maximumStrength(vector<int>& nums, int k) {
        int n=nums.size();
        vector<vector<vector<ll>>> dp;
        ll mini=LLONG_MIN/4;
        dp.resize(n+1,vector<vector<ll>>(k+1,vector<ll>(2,mini)));

        for(int i=0;i<=n;i++){
            dp[i][0][0]=dp[i][0][1]=0;
        }

        for(int i=n-1;i>=0;i--){
            for(int g=1;g<=k;g++){

                int mul=(k%2==g%2)?1:-1;

                for(int flag=0;flag<=1;flag++){
                    ll op1=1LL*g*mul*nums[i]+dp[i+1][g][1]; 
                    ll op2=1LL*g*mul*nums[i]+dp[i+1][g-1][0];  
                    ll op3=mini;
                    if(!flag) op3=dp[i+1][g][0];     
                    else op3=dp[i+1][g-1][0]; 

                    dp[i][g][flag]=max(max(op1,op2),op3);
                }
            }
        }

        return dp[0][k][0];
    }
};
