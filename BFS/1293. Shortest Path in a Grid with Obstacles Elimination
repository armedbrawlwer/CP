class Solution {
public:
    int shortestPath(vector<vector<int>>& grid, int k) {
        int m = grid.size();
        int n = grid[0].size();
        int steps = 0;
        queue<vector<int>> q;
        q.push({0, 0, k});
        int vis[41][41][1681];
        vis[0][0][k]=1;
        memset(vis, false, sizeof(vis));
        int dr[] = {-1, 1, 0, 0};
        int dc[] = {0, 0, -1, 1};
        while (!q.empty()) {
            int size = q.size();
            while (size--) {
                auto i = q.front();
                q.pop();
                int curr_i = i[0], curr_j = i[1], obs = i[2];
                if (curr_i == m - 1 && curr_j == n - 1)
                    return steps;
                for (int i = 0; i < 4; i++) {
                    int nr = curr_i + dr[i];
                    int nc = curr_j + dc[i];
                    if (nr < 0 || nc < 0 || nr >= m || nc >= n)
                        continue;

                    if (grid[nr][nc] == 0 && vis[nr][nc][obs] == 0) {
                        q.push({nr, nc, obs});
                        vis[nr][nc][obs] = 1;
                    } else if (grid[nr][nc] == 1 && obs>0 &&
                               vis[nr][nc][obs - 1] == 0 ) {
                        q.push({nr, nc, obs - 1});
                        vis[nr][nc][obs - 1] = 1;
                    }
                }
            }
            steps += 1;
        }
        return -1;
    }
};
