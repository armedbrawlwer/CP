class Solution {
public:
    vector<int> shortestAlternatingPaths(int n, vector<vector<int>>& redEdges, vector<vector<int>>& blueEdges) {
        unordered_map<int, list<pair<int, int>>> mp;
        for (auto i : redEdges) {
            mp[i[0]].push_back({i[1], 0}); // 0 for red
        }
        for (auto i : blueEdges) {
            mp[i[0]].push_back({i[1], 1}); // 1 for blue
        }

        vector<vector<int>> dist(n, vector<int>(2, INT_MAX));
        queue<pair<int, int>> q;  // {node, color}
        
        // Start with both red and blue edges from node 0
        dist[0][0] = 0;
        dist[0][1] = 0;
        q.push({0, 0}); // last edge was red
        q.push({0, 1}); // last edge was blue

        while (!q.empty()) {
            auto [node, color] = q.front();
            q.pop();
            int currDist = dist[node][color];

            for (auto [nei, neiColor] : mp[node]) {
                if (neiColor != color && dist[nei][neiColor] == INT_MAX) {
                    dist[nei][neiColor] = currDist + 1;
                    q.push({nei, neiColor});
                }
            }
        }

        vector<int> ans(n);
        for (int i = 0; i < n; i++) {
            int minDist = min(dist[i][0], dist[i][1]);
            ans[i] = (minDist == INT_MAX) ? -1 : minDist;
        }

        return ans;
    }
};
