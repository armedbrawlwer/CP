class Solution {
public:
    vector<vector<int>> highestPeak(vector<vector<int>>& arr) {
        int m = arr.size(), n = arr[0].size();
        vector<vector<int>> vec(m, vector<int>(n, 0));
        vector<vector<int>> vis=vec;
        queue<pair<int, int>> q;
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (arr[i][j] == 1) {
                    q.push({i, j});
                    vis[i][j] = 1;
                }
            }
        }
        int dr[] = {-1, 1, 0, 0}, dc[] = {0, 0, -1, 1};
        while (!q.empty()) {
            auto p = q.front();
            q.pop();
            int r = p.first,c=p.second;
            int val = vec[r][c];
            for(int k=0;k<4;k++){
                int nr = r+dr[k],nc=c+dc[k];
                if(nr>=0 && nr<m && nc>=0 && nc<n && vis[nr][nc]==0){
                    vec[nr][nc]=val+1;
                    vis[nr][nc]=1;
                    q.push({nr,nc});
                }
            }
        }
        return vec;
    }
};
