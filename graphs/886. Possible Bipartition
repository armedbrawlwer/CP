#include <vector>
#include <unordered_map>
#include <list>
#include <queue>

class Solution {
public:
    bool bfs(int start, std::unordered_map<int, std::list<int>>& mp, std::vector<int>& color) {
        std::queue<int> q;
        q.push(start);
        color[start] = 0;  // Start coloring the node with color 0
        
        while (!q.empty()) {
            int node = q.front();
            q.pop();
            
            for (auto neighbor : mp[node]) {
                if (color[neighbor] == color[node]) {
                    return false;  // Found a conflict in coloring
                }
                if (color[neighbor] == -1) {
                    color[neighbor] = 1 - color[node];  // Color with the opposite color
                    q.push(neighbor);
                }
            }
        }
        
        return true;
    }

    bool possibleBipartition(int n, std::vector<std::vector<int>>& dislikes) {
        std::vector<int> color(n + 1, -1);  // Use -1 to indicate uncolored
        std::unordered_map<int, std::list<int>> mp;
        
        for (auto& pair : dislikes) {
            mp[pair[0]].push_back(pair[1]);
            mp[pair[1]].push_back(pair[0]);
        }
        
        for (int i = 1; i <= n; ++i) {
            if (color[i] == -1) {
                if (!bfs(i, mp, color)) {
                    return false;
                }
            }
        }
        
        return true;
    }
};
