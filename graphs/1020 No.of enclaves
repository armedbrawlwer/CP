class Solution {
public:
    int numEnclaves(vector<vector<int>>& grid) {
        int n=grid.size();
        int m=grid[0].size();
        queue<pair<int,int>> q;
        vector<vector<bool>>visit(n,vector<bool>(m,false));
        for(int i=0;i<n;i++)
        {
            for(int j=0;j<m;j++)
            {
                if(i==0 || i==n-1 || j==0 || j==m-1)
                {
                    if(grid[i][j]==1)
                    {
                        q.push({i,j});
                        visit[i][j]=1;
                    }
                }
            }
        }
        int dr[]={-1,1,0,0},dc[]={0,0,-1,1};
        while(!q.empty())
        {
            pair<int,int> p=q.front();
            q.pop();
            int r=p.first,c=p.second;
            for(int k=0;k<4;k++)
            {
                int nr=r+dr[k];
                int nc=c+dc[k];
                if(nr>=0 && nr<n && nc>=0 && nc<m && visit[nr][nc]==false && grid[nr][nc]==1)
                {
                    visit[nr][nc]=1;
                    q.push({nr,nc});
                }
            }
        }
        int cnt=0;
        for(int i=0;i<n;i++)
        {
            for(int j=0;j<m;j++)
            {
                if(grid[i][j]==1 && visit[i][j]==false) cnt++;
            }
        }
        return cnt;
    }
};
