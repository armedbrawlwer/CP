class Solution {
public:
    vector<int> rank;
    vector<int> parent;

    int find(int x) {
        if (x == parent[x])
            return x;
        return parent[x] = find(parent[x]);
    }

    void Union(int x, int y) {
        int x_parent = find(x);
        int y_parent = find(y);

        if (x_parent == y_parent)
            return;

        if (rank[x_parent] > rank[y_parent]) {
            parent[y_parent] = x_parent;
        } else if (rank[x_parent] < rank[y_parent]) {
            parent[x_parent] = y_parent;
        } else {
            parent[x_parent] = y_parent;
        }
    }

    int numberOfGoodPaths(vector<int>& vals, vector<vector<int>>& edges) {
        int n = vals.size();

        parent.resize(n);
        rank.resize(n, 1);

        for (int i = 0; i < n; i++) {
            parent[i] = i;
        }

        unordered_map<int, vector<int>> adj;

        for (vector<int>& vec : edges) {
            int u = vec[0];
            int v = vec[1];

            adj[u].push_back(v);
            adj[v].push_back(u);
        }
        int ans=n;
        map<int, vector<int>> val_to_nodes;

        for (int i = 0; i < n; i++) {
            int value = vals[i];
            val_to_nodes[value].push_back(i);
        }
        vector<bool> isactive(n, false);

        for (auto& value : val_to_nodes) {
            vector<int> nodes = value.second;

            for (auto& node : nodes) {
                for (auto& v : adj[node]) {
                    if (isactive[v]==1) {
                        Union(node, v);
                    }
                }
                isactive[node] = 1;
            }
            vector<int> parents;
            for (auto& u : nodes) {
                int par = find(u);
                parents.push_back(par);
            }
            sort(parents.begin(), parents.end());
            for (int i = 0; i < parents.size(); i++) {
                long long ctr = 0;
                int curr = parents[i];
                while (i < parents.size() && curr == parents[i]) {
                    ctr += 1;
                    i += 1;
                }
                i--;
                int tp =( ctr * (ctr - 1) )/ 2;
                ans += tp;
            }
        }
        return ans;
    }
};
