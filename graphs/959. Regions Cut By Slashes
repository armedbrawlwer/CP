class Solution {
public:
    void dfs(int i, int j, vector<vector<int>>& v, vector<vector<bool>>& vis) {
        if (i < 0 || i >= v.size() || j < 0 || j >= v[0].size() || vis[i][j] ||
            v[i][j] == 1) {
            return;
        }

        vis[i][j] = true;

        dfs(i + 1, j, v, vis);
        dfs(i - 1, j, v, vis);
        dfs(i, j + 1, v, vis);
        dfs(i, j - 1, v, vis);
    }
    // in symbol questions try representing symbols using intergers or other
    // ways we choose 3x3 grid here as lower size grids were not giving correct
    // answerx

    int regionsBySlashes(vector<string>& grid) {
        int n = grid.size();
        vector<vector<int>> v(n * 3, vector<int>(n * 3, 0));

        // Populate the grid based on slashes
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                if (grid[i][j] == '/') {
                    v[i * 3][j * 3 + 2] = 1;
                    v[i * 3 + 1][j * 3 + 1] = 1;
                    v[i * 3 + 2][j * 3] = 1;
                } else if (grid[i][j] == '\\') {
                    v[i * 3][j * 3] = 1;
                    v[i * 3 + 1][j * 3 + 1] = 1;
                    v[i * 3 + 2][j * 3 + 2] = 1;
                }
            }
        }

        int regions = 0;
        vector<vector<bool>> vis(n * 3, vector<bool>(n * 3, false));

        // Perform DFS for each cell that is not visited and not part of a slash
        for (int i = 0; i < v.size(); i++) {
            for (int j = 0; j < v[0].size(); j++) {
                if (!vis[i][j] && v[i][j] == 0) {
                    regions++;
                    dfs(i, j, v, vis);
                }
            }
        }

        return regions;
    }
};
