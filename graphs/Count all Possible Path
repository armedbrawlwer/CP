//{ Driver Code Starts

#include<bits/stdc++.h>
using namespace std;

// } Driver Code Ends

class Solution {
public:

    void dfs(int node,unordered_map<int,list<int>> &adj,int &cc,vector<int> &vis,vector<int> &in
    ,int &odd)
    {
        vis[node] = 1;
        cc++;
        odd = odd || (in[node]&1);
        for(auto j:adj[node])
        {
            if(vis[j]==0)
            {
                dfs(j,adj,cc,vis,in,odd);
            }
        }
    }

	int isPossible(vector<vector<int>>paths){
	    // Code here
	    int n = paths.size();
	    vector<int> in(n,0),vis(n,0);
	    int cc=0,odd=0;
	    unordered_map<int,list<int>> adj;
	    for(int i=0;i<n;i++)
	    {
	        for(int j=0;j<n;j++)
	        {
	            if(paths[i][j]==1)
	            {
	                adj[i].push_back(j);
	                in[j]++;
	            }
	        }
	    }
	    
	    dfs(0,adj,cc,vis,in,odd);
	    return cc==n && !odd;
	}

};

//{ Driver Code Starts.
int main(){
	int tc;
	cin >> tc;
	while(tc--){
		int n;
		cin >> n;
		vector<vector<int>>paths(n, vector<int>(n, 0));
		for(int i = 0; i < n; i++){
			for(int j = 0; j < n; j++)
				cin >> paths[i][j];
		}
		Solution obj;
		int ans = obj.isPossible(paths);
		cout << ans <<"\n";
	}
	return 0;
}
// } Driver Code Ends
