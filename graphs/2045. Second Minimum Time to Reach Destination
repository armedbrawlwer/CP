#include <vector>
#include <unordered_map>
#include <queue>
#include <list>
#include <algorithm>
using namespace std;

class Solution {
public:
    int secondMinimum(int n, vector<vector<int>>& edges, int time, int change) {
        unordered_map<int, list<int>> adjList;
        for (auto &edge : edges) {
            adjList[edge[0]].push_back(edge[1]);
            adjList[edge[1]].push_back(edge[0]);
        }
        
        vector<vector<int>> dist(n + 1, vector<int>(2, INT_MAX)); // distance to store first and second shortest time
        dist[1][0] = 0; // Starting point
        
        queue<pair<int, int>> q;
        q.push({1, 0}); // node, current time
        
        while (!q.empty()) {
            auto [node, currTime] = q.front();
            q.pop();
            
            int nextSignal = (currTime / change) % 2 == 0 ? currTime : (currTime / change + 1) * change;
            
            for (int neighbor : adjList[node]) {
                int arrivalTime = nextSignal + time;
                
                if (arrivalTime < dist[neighbor][0]) {
                    dist[neighbor][1] = dist[neighbor][0];
                    dist[neighbor][0] = arrivalTime;
                    q.push({neighbor, arrivalTime});
                } else if (arrivalTime > dist[neighbor][0] && arrivalTime < dist[neighbor][1]) {
                    dist[neighbor][1] = arrivalTime;
                    q.push({neighbor, arrivalTime});
                }
            }
        }
        
        return dist[n][1];
    }
};

