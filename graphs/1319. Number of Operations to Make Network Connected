class Solution {
public:

    void dfs(int node,vector<int> &vis,int &ctr,unordered_map<int, list<int>> &adj){
        vis[node]=1;
        for(auto nei:adj[node]){
            if(vis[nei]!=1){
                 dfs(nei,vis,ctr,adj);
            }
        }
    }

    int makeConnected(int n, vector<vector<int>>& edges) {
        unordered_map<int, list<int>> adj;
        if(edges.size()<n-1) return -1;
        for (auto i : edges) {
            adj[i[0]].push_back(i[1]);
            adj[i[1]].push_back(i[0]);
        }

        int wires = 0;
        int comp = 0;
        vector<int> vis(n, 0);
        for (int i = 0; i < n; i++) {
            int ctr = 0;
            if (vis[i] == 0) {
                comp++;
                dfs(i,vis,ctr,adj);
                wires+=ctr;
                wires-=adj[i].size();
                
            }
        }
        
        return comp-1;
    }
};
