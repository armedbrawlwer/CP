class Solution {
public:

    int dfs(unordered_map<int,list<int>> &mp,vector<bool>& has,int node,int parent){
        int time=0;
        
        for(auto j:mp[node]){
            if(j==parent) continue;
            
            int timeFromChild = dfs(mp,has,j,node);
            if(timeFromChild>0 || has[j]==1){
                time+=timeFromChild+2;
            }
        }
        return time;
    }

    int minTime(int n, vector<vector<int>>& arr, vector<bool>& has) {
        //each node can have at most 2 children
        //keep track of apple count and time to traverse them
        //if apple found in subtree add edge as timee
        //add 2 instead of 1

        unordered_map<int,list<int>> mp;
        for(auto i:arr){
            int u=i[0],v=i[1];
            mp[u].push_back(v);
            mp[v].push_back(u);
        }
        // vector<bool> vis(n,0);
        return dfs(mp,has,0,-1);
    }
};
