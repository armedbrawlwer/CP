/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    vector<ListNode*> splitListToParts(ListNode* head, int k) {
        // Calculate the total length of the linked list
        int total_length = 0;
        ListNode* temp = head;
        while (temp != nullptr) {
            total_length++;
            temp = temp->next;
        }

        // Determine the size of each part and the number of parts that will have an extra node
        int part_size = total_length / k;
        int extra_nodes = total_length % k;

        vector<ListNode*> result(k, nullptr);
        ListNode* current = head;
        for (int i = 0; i < k && current != nullptr; ++i) {
            result[i] = current;
            int current_part_size = part_size + (i < extra_nodes ? 1 : 0);
            for (int j = 1; j < current_part_size; ++j) {
                current = current->next;
            }
            ListNode* next_part = current->next;
            current->next = nullptr;
            current = next_part;
        }
        
        return result;
    }
};
